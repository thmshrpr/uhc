%%[93 hs module {%{EH}Core.Trf.CaseOfKnown} import ({%{EH}Base.HsName}, {%{EH}Core}, {%{EH}Base.Common}, {%{EH}AbstractCore}, {%{EH}Ty}, {%{EH}Core.Trf.Subst}(cexprSubst), Debug.Trace)  
%%]

%%[93 ag import ({Core/AbsSyn})
{
caseOfKnown :: CTag -> [CExpr] -> [(CPat,CExpr)] -> Maybe CExpr
caseOfKnown ctag cargs calts = do (binds,expr) <- (case match ctag calts of {Nothing -> trace "CoK: no match found" Nothing; x -> x})
                                  trace ("CoK: Found match with binds " ++ show binds ++ " and expr " ++ show expr) $ return ()
                                  let substs = zip cargs binds
			          trace ("CoK: Making substs " ++ show substs) $ return ()
				  let expr' = foldr (\ (carg,bind) expr -> cexprSubst bind expr carg) expr substs
				  trace ("CoK: result is " ++ show expr') $ return expr'

-- Only matches identical CTags, not vars that would work or the default, which would be preferred.

match :: CTag -> [(CPat,CExpr)] -> Maybe ([HsName],CExpr)
match ctag x@((CPat_Con ptag _ binds, expr):xs)
        | ctag == ptag = Just (map getfldNm binds,expr) -- vars to be subst and the expr                           
        | otherwise    = match ctag xs 
match ctag (_:xs) = match ctag xs
match ctag []     = Nothing

getfldNm :: CPatFld -> HsName
getfldNm (CPatFld_Fld _ _ fldNm _) = fldNm
}

%%]
WRAPPER CExpr

ATTR AllCodeNT [ | | trf : SELF]

SEM CExpr
        | Case lhs.trf = maybe @trf id $ do 
                            cTag <- @expr.con
                            let possibleAlts = filter (\ (CAlt_Alt (CPat_Con pTag _ _) _) -> cTag == pTag) @alts.trf
                            case possibleAlts of
                                []                                            -> Nothing 
                                ((CAlt_Alt (CPat_Con _ rest binds) expr) : _) -> let args = reverse (getArgs expr)
                                                                                     nms  = map getfldNm binds
                                                                                 in  return $ foldr (\ (arg,bind) expr -> cexprSubst bind expr arg) expr (zip args nms)
                                

ATTR CExpr [ | | con : {Maybe CTag} ] 

SEM CExpr
        | App lhs.con = @func.con 
        | Tup lhs.con = Just @tag
        -- vars should look themselves up to see if their are constructor tags
        | * - App Tup lhs.con = Nothing
